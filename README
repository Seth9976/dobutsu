Ideas for compact representation in the database:

+---+ The sente lion has five squares to be on: If the lion is on A,
|AAA| he has already won, so this can't happen.  If he's on B, we can
|BCX| mirror the board. When he's on C, there is no way to place the
|BXX| Gote lion so this can't be the case.
|BXX|
+---+

The Gote lion has up to seven squares. When he's in the opponents
promotion zone A he is either in check (in which case the position is
invalid) or has already won. When he's on B, he is in check by Sente
which makes the position invalid. This leaves 7 + 6 + 5 + 3 + 3 = 24
positions for the lions:

+---+ +---+ +---+ +---+ +---+
|XXX| |XXX| |XXX| |XXX| |XBB|
|XXX| |XXX| |XBB| |BBB| |XBL|
|XBB| |BBB| |XBL| |BLB| |XBB|
|AAL| |ALA| |AAA| |AAA| |AAA|
+---+ +---+ +---+ +---+ +---+

Board coordinates:

+---+
|BA9|
|876|
|543|
|210|
+---+

The remaining pieces have up to 11 positions: up to ten free squares or
in the hand of the player. We encode ownership of each kind of piece
with three states:

# Oo
----
0 00
1 01
  10 (like 1)
2 11

0: owned by gote
1: owned by sente

0: unpromoted (chick)
1: promoted (rooster)

We can reduce the number of states for the chicks by encoding promotion
and state together:

# PpOo
------
0 0000
1 0001
  0010 (like 1)
2 0011
3 0100
4 0101
  0110 (like 6)
5 0111
  1000 (like 3)
6 1001
  1010 (like 4)
  1011 (like 5)
7 1100
8 1101
  1110 (like 8)
9 1111

Furthermore, we consider the following positions a violation of parity
to furtherly reduce the count:

* A chick in hand is promoted
* Both pieces of a kind are owned by the same player and the second one
  is on a higher field than the first.

Lastly, if Gote's lion is in check Sente has already won so we don't
have to store these positions in the table.

Altogether we get:

24 * 3 * 3 * 10 * 11 * 11 * 11 * 11 * 11 * 11 = 3826571760 positions.

If we have one byte per position, that's an endgame file of 3.6 gigabytes.

Only 359293714 positions are reachable, 91 of the space is wasted. It's
hard to make a better index format without making it very complicated.

For example, the starting position looks like this:

    +---+
    |elg| 0xA8B2A3C185
    | c |
    | C |
    |GLE|
    +---+

Board visualization:

Capital letter means owned by sente, lower-case letter is owned by gote.  Pieces:

L/l: lion
E/e: elephant
G/g: giraffe
C/C: chick
R/r: rooster

Pieces in hand are placed to the right of the board, like this:

    +---+
    | lg| c
    | e |
    |   |
    |GLE| C
    +---+

Second level compression:

The actual endgame file uses a two stage encoding, the first stage being
listed above.  For the second stage, the index is grouped into buckets
of 4096 indices.  Invalid entries are removed from each bucket, the
reduced buckets are stored in the index file.  A table stores where each
bucket begins.  To find a given position, you look up the beginning of
the bucket in the table and then compute the offset where your position
is by checking how many indices before yours are invalid.
